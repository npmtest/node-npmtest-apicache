{"/home/travis/build/npmtest/node-npmtest-apicache/test.js":"/* istanbul instrument in package npmtest_apicache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apicache/lib.npmtest_apicache.js":"/* istanbul instrument in package npmtest_apicache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apicache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apicache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apicache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apicache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apicache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apicache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apicache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_apicache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apicache.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_apicache.__dirname + '/lib.npmtest_apicache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apicache/node_modules/apicache/src/apicache.js":"var url         = require('url')\nvar MemoryCache = require('./memory-cache')\nvar pkg         = require('../package.json')\n\nvar t           = {\n  ms:           1,\n  second:       1000,\n  minute:       60000,\n  hour:         3600000,\n  day:          3600000 * 24,\n  week:         3600000 * 24 * 7,\n  month:        3600000 * 24 * 30,\n}\n\nvar instances = []\n\nvar matches = function(a) {\n  return function(b) { return a === b }\n}\n\nvar doesntMatch = function(a) {\n  return function(b) { return !matches(a)(b) }\n}\n\nvar logDuration = function(d, prefix) {\n  var str = (d > 1000) ? ((d/1000).toFixed(2) + 'sec') : (d + 'ms')\n  return '\\x1b[33m- ' + (prefix ? prefix + ' ' : '') + str + '\\x1b[0m'\n}\n\nfunction ApiCache() {\n  var memCache = new MemoryCache\n\n  var globalOptions = {\n    debug:              false,\n    defaultDuration:    3600000,\n    enabled:            true,\n    appendKey:          [],\n    jsonp:              false,\n    redisClient:        false,\n    statusCodes: {\n      include: [],\n      exclude: [],\n    }\n  }\n\n  var instance = this\n  var index = null\n\n  instances.push(this)\n  this.id = instances.length\n\n  function debug(a,b,c,d) {\n    var arr = (['\\x1b[36m[apicache]\\x1b[0m', a,b,c,d]).filter(function(arg) { return arg !== undefined })\n    var debugEnv = process.env.DEBUG && process.env.DEBUG.split(',').indexOf('apicache') !== -1\n\n    return (globalOptions.debug || debugEnv) && console.log.apply(null, arr)\n  }\n\n  function shouldCacheResponse(response) {\n    var opt = globalOptions\n    var codes = opt.statusCodes\n\n    if (!response) return false\n\n    if (codes.exclude && codes.exclude.length && codes.exclude.indexOf(response.statusCode) !== -1) return false\n    if (codes.include && codes.include.length && codes.include.indexOf(response.statusCode) === -1) return false\n\n    return true\n  }\n\n  function addIndexEntries(key, req) {\n    var groupName = req.apicacheGroup\n\n    if (groupName) {\n      debug('group detected \"' + groupName + '\"')\n      var group = (index.groups[groupName] = index.groups[groupName] || [])\n      group.unshift(key)\n    }\n\n    index.all.unshift(key)\n  }\n\n  function createCacheObject(status, headers, data, encoding) {\n    return {\n      status: status,\n      headers: Object.assign({}, headers),\n      data: data,\n      encoding: encoding\n    }\n  }\n\n  function cacheResponse(key, value, duration) {\n    var redis = globalOptions.redisClient\n    if (redis) {\n      redis.hset(key, \"response\", JSON.stringify(value))\n      redis.hset(key, \"duration\", duration)\n      redis.expire(key, duration/1000)\n    } else {\n      memCache.add(key, value, duration)\n    }\n\n    // add automatic cache clearing from duration, includes max limit on setTimeout\n    setTimeout(function() { instance.clear(key, true) }, Math.min(duration, 2147483647))\n  }\n\n  function accumulateContent(res, content) {\n    if (content) {\n      if (typeof(content) == 'string') {\n        res._apicache.content = (res._apicache.content || '') + content;\n      } else if (Buffer.isBuffer(content)) {\n        var oldContent = res._apicache.content\n        if (!oldContent) {\n          oldContent = !Buffer.alloc ? new Buffer(0) : Buffer.alloc(0);\n        }\n        res._apicache.content = Buffer.concat([oldContent, content], oldContent.length + content.length);\n      } else {\n        res._apicache.content = content\n        // res._apicache.cacheable = false;\n      }\n    }\n  }\n\n  function makeResponseCacheable(req, res, next, key, duration, strDuration) {\n    // monkeypatch res.end to create cache object\n    res._apicache = {\n      write: res.write,\n      end: res.end,\n      cacheable: true,\n      content: undefined\n    }\n\n    // add cache control headers\n    res.header('cache-control', 'max-age=' + (duration / 1000).toFixed(0))\n\n    // patch res.write\n    res.write = function(content) {\n      accumulateContent(res, content);\n      return res._apicache.write.apply(this, arguments);\n    }\n\n    // patch res.end\n    res.end = function(content, encoding) {\n      if (shouldCacheResponse(res)) {\n\n        accumulateContent(res, content);\n\n        if (res._apicache.cacheable && res._apicache.content) {\n          addIndexEntries(key, req)\n          var cacheObject = createCacheObject(res.statusCode, res._headers, res._apicache.content, encoding)\n          cacheResponse(key, cacheObject, duration)\n\n          // display log entry\n          var elapsed = new Date() - req.apicacheTimer\n          debug('adding cache entry for \"' + key + '\" @ ' + strDuration, logDuration(elapsed))\n        }\n      }\n\n      return res._apicache.end.apply(this, arguments);\n    }\n\n    next()\n  }\n\n\n  function sendCachedResponse(response, cacheObject) {\n    response._headers = response._headers || {}\n    Object.assign(response._headers, cacheObject.headers || {}, {\n      'apicache-store': globalOptions.redisClient ? 'redis' : 'memory',\n      'apicache-version': pkg.version\n    })\n\n    // unstringify buffers\n    var data = cacheObject.data\n    if (data && data.type === 'Buffer') {\n      data = new Buffer(data.data)\n    }\n\n    response.writeHead(cacheObject.status || 200, response._headers)\n\n    return response.end(data, cacheObject.encoding)\n  }\n\n  this.clear = function(target, isAutomatic) {\n    var group = index.groups[target]\n    var redis = globalOptions.redisClient\n\n    if (group) {\n      debug('clearing group \"' + target + '\"')\n\n      group.forEach(function(key) {\n        debug('clearing cached entry for \"' + key + '\"')\n\n        if (!globalOptions.redisClient) {\n          memCache.delete(key)\n        } else {\n          redis.del(key)\n        }\n        index.all = index.all.filter(doesntMatch(key))\n      })\n\n      delete index.groups[target]\n    } else if (target) {\n      debug('clearing ' + (isAutomatic ? 'expired' : 'cached') + ' entry for \"' + target + '\"')\n\n      // clear actual cached entry\n      if (!redis) {\n        memCache.delete(target)\n      } else {\n        redis.del(target)\n      }\n\n      // remove from global index\n      index.all = index.all.filter(doesntMatch(target))\n\n      // remove target from each group that it may exist in\n      Object.keys(index.groups).forEach(function(groupName) {\n        index.groups[groupName] = index.groups[groupName].filter(doesntMatch(target))\n\n        // delete group if now empty\n        if (!index.groups[groupName].length) {\n          delete index.groups[groupName]\n        }\n      })\n    } else {\n      debug('clearing entire index')\n\n      if (!redis) {\n        memCache.clear()\n      } else {\n        // clear redis keys one by one from internal index to prevent clearing non-apicache entries\n        index.all.forEach(function(key) {\n          redis.del(key)\n        })\n      }\n      this.resetIndex()\n    }\n\n    return this.getIndex()\n  }\n\n  this.getDuration = function(duration) {\n    if (typeof duration === 'number') return duration\n\n    if (typeof duration === 'string') {\n      var split = duration.match(/^([\\d\\.,]+)\\s(\\w+)$/)\n\n      if (split.length === 3) {\n        var len = parseFloat(split[1])\n        var unit = split[2].replace(/s$/i,'').toLowerCase()\n        if (unit === 'm') {\n          unit = 'ms'\n        }\n\n        return (len || 1) * (t[unit] || 0)\n      }\n    }\n\n    return globalOptions.defaultDuration\n  }\n\n  this.getIndex = function(group) {\n    if (group) {\n      return index.groups[group]\n    } else {\n      return index\n    }\n  }\n\n  this.middleware = function cache(strDuration, middlewareToggle) {\n    var duration = instance.getDuration(strDuration)\n\n    return function cache(req, res, next) {\n      function bypass() {\n        debug('bypass detected, skipping cache.')\n        return next()\n      }\n\n      // initial bypass chances\n      if (!globalOptions.enabled) return bypass()\n      if (req.headers['x-apicache-bypass'] || req.headers['x-apicache-force-fetch']) return bypass()\n      if (typeof middlewareToggle === 'function') {\n        if (!middlewareToggle(req, res)) return bypass()\n      } else if (middlewareToggle !== undefined && !middlewareToggle) {\n        return bypass()\n      }\n\n      // embed timer\n      req.apicacheTimer = new Date()\n\n      // In Express 4.x the url is ambigious based on where a router is mounted.  originalUrl will give the full Url\n      var key = req.originalUrl || req.url\n\n      // Remove querystring from key if jsonp option is enabled\n      if (globalOptions.jsonp) {\n        key = url.parse(key).pathname\n      }\n\n      if (globalOptions.appendKey.length > 0) {\n        var appendKey = req\n\n        for (var i = 0; i < globalOptions.appendKey.length; i++) {\n          appendKey = appendKey[globalOptions.appendKey[i]]\n        }\n        key += '$$appendKey=' + appendKey\n      }\n\n      // attempt cache hit\n      var redis = globalOptions.redisClient\n      var cached = !redis ? memCache.getValue(key) : null\n\n      // send if cache hit from memory-cache\n      if (cached) {\n        var elapsed = new Date() - req.apicacheTimer\n        debug('sending cached (memory-cache) version of', key, logDuration(elapsed))\n\n        return sendCachedResponse(res, cached)\n      }\n\n      // send if cache hit from redis\n      if (redis) {\n        redis.hgetall(key, function (err, obj) {\n          if (!err && obj) {\n            var elapsed = new Date() - req.apicacheTimer\n            debug('sending cached (redis) version of', key, logDuration(elapsed))\n\n            return sendCachedResponse(res, JSON.parse(obj.response))\n          } else {\n            return makeResponseCacheable(req, res, next, key, duration, strDuration)\n          }\n        })\n      } else {\n        return makeResponseCacheable(req, res, next, key, duration, strDuration)\n      }\n    }\n  }\n\n  this.options = function(options) {\n    if (options) {\n      Object.assign(globalOptions, options)\n\n      return this\n    } else {\n      return globalOptions\n    }\n  }\n\n  this.resetIndex = function() {\n    index = {\n      all: [],\n      groups: {}\n    }\n  }\n\n  this.newInstance = function(config) {\n    var instance = new ApiCache()\n\n    if (config) {\n      instance.options(config)\n    }\n\n    return instance\n  }\n\n  this.clone = function() {\n    return this.newInstance(this.options())\n  }\n\n  // initialize index\n  this.resetIndex()\n}\n\nmodule.exports = new ApiCache()\n","/home/travis/build/npmtest/node-npmtest-apicache/node_modules/apicache/src/memory-cache.js":"function MemoryCache() {\n\tthis.cache = {}\n\tthis.size = 0\n}\n\nMemoryCache.prototype.add = function(key, value, time, timeoutCallback) {\n\tvar old = this.cache[key]\n\tvar instance = this\n\n\tif (old) {\n\t\tclearTimeout(old.timeout)\n\t}\n\n\tvar entry = {\n\t\tvalue: value,\n\t\texpire: time + Date.now(),\n\t\ttimeout: setTimeout(function() {\n\t\t\tinstance.delete(key)\n\t\t\treturn timeoutCallback && typeof timeoutCallback === 'function' && timeoutCallback(value, key)\n\t\t}, time)\n\t}\n\n\tthis.cache[key] = entry\n\tthis.size = Object.keys(this.cache).length\n\n\treturn entry\n}\n\nMemoryCache.prototype.delete = function(key) {\n\tvar entry = this.cache[key]\n\n\tif (entry) {\n\t\tclearTimeout(entry.timeout)\n\t}\n\n\tdelete this.cache[key]\n\n\tthis.size = Object.keys(this.cache).length\n\n\treturn null\n}\n\nMemoryCache.prototype.get = function(key) {\n\tvar entry = this.cache[key]\n\n\tif (entry && entry.expire < Date.now()) {\n\t\treturn this.delete(key)\n\t}\n\n\treturn entry\n}\n\nMemoryCache.prototype.getValue = function(key) {\n\tvar entry = this.get(key)\n\n\treturn entry && entry.value\n}\n\nMemoryCache.prototype.clear = function() {\n\tObject.keys(this.cache).forEach(function(key) {\n\t\tthis.delete(key)\n\t}, this)\n\n\treturn true\n}\n\nmodule.exports = MemoryCache\n"}